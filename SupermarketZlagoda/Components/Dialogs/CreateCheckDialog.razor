@using SupermarketZlagoda.Data.Model
@using SupermarketZlagoda.Data
@using SupermarketZlagoda.Components.Pages
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.ComponentModel
@using Blazored.LocalStorage
@inject IDialogService DialogService
@inject User User
@implements IDialogContentComponent<Check>
@inject ILocalStorageService LocalStorage
 @* Header *@
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

 @* Footer *@
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

 @* Body *@
<FluentDialogBody>
<FluentTextField Value="@($"{User.Data?.Surname} {User.Data?.Name} {User.Data?.Patronymic}")" ReadOnly="true" Style="width: 100%"> Employee: </FluentTextField>    <br/><br/>
     <FluentCombobox Style="width: 100%" Items="@_customerList"
                                    Label="Customer:"
                                    OptionValue="@(customerCard => customerCard.Id.ToString())"
                                    OptionText="@(customerCard => customerCard.Surname + " " + customerCard.Name + " " + customerCard.Patronymic)"
                                    @bind-SelectedOption="@CustomerCard">
         <OptionTemplate Context="optionContext">
             @($"{optionContext.Surname} {optionContext.Name} {optionContext.Patronymic}")
         </OptionTemplate>
         </FluentCombobox>
    <br/><br/>
    <FluentDatePicker Label="Print Date" ReadOnly="true" Value="@Content.PrintDate" ValueChanged="@(e =>@Content.PrintDate = e.ToDateTime())" />
    <FluentTimePicker ReadOnly="true" Value="@Content.PrintDate" ValueChanged="@(e => @Content.PrintDate = e.ToDateTime())" />
    <br/><br/>
    <FluentDivider></FluentDivider>
<FluentCombobox Style="width: 100%" Items="@_storeProductsList"
                Label="Add new product:"
                OptionValue="@(storeProduct => storeProduct.Upc)"
                OptionText="@(storeProduct => $"{storeProduct.Upc} - {_productNames[storeProduct.Upc].Item1} {(storeProduct.IsPromotional ? "- Promotional" : "")}")"
                @bind-SelectedOption="@StoreProduct">
    <OptionTemplate Context="optionContext">
           @($"{optionContext.Upc} - {_productNames[optionContext.Upc].Item1} {(optionContext.IsPromotional ? " - Promotional" : "")}")
            </OptionTemplate>
</FluentCombobox>
    <br/><br/>
    <FluentButton Appearance="Appearance.Accent" OnClick="@AddNewSale" Style="width: 100%">Add product</FluentButton>
    <FluentDataGrid GridTemplateColumns="1fr 1.5fr 1fr 1fr 1fr 1fr" Items=SalesList.AsQueryable()>
        <TemplateColumn Title="UPC">
            <FluentTextField @bind-Value="@context.UPC" ReadOnly="true"/>
        </TemplateColumn>
        <TemplateColumn Title="Name">
            <FluentTextField Value="@_productNames[context.UPC].Item1" ReadOnly="true"/>
        </TemplateColumn>
        <TemplateColumn Title="Prom">
            <FluentTextField Value="@(_productNames[context.UPC].Item2.ToString())" ReadOnly="true"/>
            </TemplateColumn>
        <TemplateColumn Title="Number">
            <FluentNumberField Value="@context.ProductNumber" 
                                   ValueChanged="(int value) => HandleQuantityChanged(context, value)"
                                   Min="1" 
                                   Max= "@context.MaxQuantity.ToString()"/>
        </TemplateColumn>
        <TemplateColumn Title="Price">
            <FluentNumberField Value="@context.SellingPrice" ReadOnly="true" />
        </TemplateColumn>
        <TemplateColumn>
            <FluentButton Appearance="Appearance.Accent" Style="width: 100%" OnClick="@( () => DeleteSale(context) )">Delete</FluentButton>
        </TemplateColumn>
    </FluentDataGrid>
    <FluentDivider></FluentDivider>
    <br/><br/>
    <FluentNumberField @bind-Value="@Content.SumTotal" ReadOnly="true" Style="width: 100%"> Sum total: </FluentNumberField>
    <br/><br/>
    <FluentNumberField @bind-Value="@Content.Vat" ReadOnly="true" Style="width: 100%"> Vat: </FluentNumberField>
    </FluentDialogBody>

@code {

    string? stringValue;

    private const string CustomerApiUrl = "https://localhost:5001/api/customer-card";
    private const string StoreProductApiUrl = "https://localhost:5001/api/store-products";
    [Parameter] public Check Content { get; set; } = default!;

    [CascadingParameter] 
    public FluentDialog Dialog { get; set; } = default!;
    private static readonly HttpClient Client = new();
    

    private CustomerCard? CustomerCard { get; set; }
    private List<CustomerCard>? _customerList = [];

    private StoreProduct? StoreProduct { get; set; }
    private IEnumerable<StoreProduct> _storeProductsList = [];

    private List<Sale> SalesList = new List<Sale>();

    private Dictionary<string, Tuple<string, bool>> _productNames = new Dictionary<string, Tuple<string, bool>>();
    protected override async Task OnInitializedAsync()
    {
        User.Data = await LocalStorage.GetItemAsync<Employee?>("UserData");
        await InitializeCustomerListAsync();
        await InitializeStoreProductListAsync();
        CheckStoreProductAndActIfNeeded();
        SetCustomerCard();
        foreach (var storeProduct in _storeProductsList)
        {
            await GetProductNameAsync(storeProduct);
        }
        
    }
    

    private async Task InitializeCustomerListAsync()
    {
        _customerList = await GetCustomerList();
        _customerList.Insert(0, new CustomerCard { Id = Guid.Empty, Surname = "None" });
    }

    private async Task InitializeStoreProductListAsync()
    {
        var data = await GetStoreProductList();
        if (data != null) _storeProductsList = data.Where(x => x.Quantity > 0);
    }
    

    private async void CheckStoreProductAndActIfNeeded()
    {
        if (_storeProductsList != null && _storeProductsList.Any()) return;
        await ShowStoreProductErrorAsync();
        await Dialog.CancelAsync();
    }

    private void SetCustomerCard()
    {
        CustomerCard = Content.IdCardCustomer != Guid.Empty
            ? GetMatchingCustomerCardFromList()
            : _customerList.ElementAtOrDefault(0);
    }


    private CustomerCard GetMatchingCustomerCardFromList()
    {
        return _customerList.FirstOrDefault(x => x.Id == Content.IdCardCustomer);
    }

    
    private async Task ShowStoreProductErrorAsync()
    {
        var dialog = await DialogService.ShowErrorAsync("Before doing this, create at least 1 product in the store");
        var result = await dialog.Result;
    }
    

    private async Task<List<CustomerCard>?> GetCustomerList()
    {
        var response = await Client.GetAsync(CustomerApiUrl);
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Error: {response.StatusCode}");
            return null;
        }

        var content = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<List<CustomerCard>>(JObject.Parse(content)["items"].ToString());
    }

    private async Task<List<StoreProduct>?> GetStoreProductList()
    {
        var response = await Client.GetAsync(StoreProductApiUrl);
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Error: {response.StatusCode}");
            return null;
        }

        var content = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<List<StoreProduct>>(JObject.Parse(content)["items"].ToString());
    }

    private async Task SaveAsync()
    {
        if (SalesList.Count != 0)
        {
            Content.IdEmployee = User.Data.Id;
            if (CustomerCard.Id == Guid.Empty) Content.IdCardCustomer = null;
            else Content.IdCardCustomer = CustomerCard.Id;
            await Dialog.CloseAsync(Content);
            CheckTable.SalesList = SalesList;
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    private async Task AddNewSale()
    {
        if (StoreProduct != null && !SalesList.Exists(x => x.UPC == StoreProduct.Upc))
        {
            var newSale = new Sale
            {
                CheckNumber = Content.IdCheck,
                UPC = StoreProduct.Upc,
                ProductNumber = 1,
                SellingPrice = StoreProduct.Price,
                MaxQuantity = await GetMaxQuantity(StoreProduct.Upc)
            };
            await GetMaxQuantity(newSale.UPC);
            SalesList.Add(newSale);
            UpdateTotalAndVat();
        }
        else
        {
            Console.WriteLine("Already in the this check");
        }
    }

    private void UpdateTotalAndVat()
    {
        decimal discountPercentage = 0m;
        if (CustomerCard != null)
        {
            discountPercentage = (decimal)CustomerCard.Percentage / 100m;
        }

        decimal totalBeforeDiscount = SalesList.Sum(sale => sale.ProductNumber * sale.SellingPrice);
        Content.SumTotal = totalBeforeDiscount - (totalBeforeDiscount * discountPercentage);
        Content.Vat = 0.2m * Content.SumTotal;
    }

    private void HandleQuantityChanged(Sale context, int value)
    {
        context.ProductNumber = value;
        UpdateTotalAndVat();
    }

    private void DeleteSale(Sale sale)
    {
        SalesList.Remove(sale);
        UpdateTotalAndVat();
    }
    
   
    private async Task<int> GetMaxQuantity(string? upc)
    {
        var response = await Client.GetAsync($"https://localhost:5001/api/store-products/{upc}");
        if (response.IsSuccessStatusCode)
        {
            var responseJson = await response.Content.ReadAsStringAsync();
            var storeProduct = JsonConvert.DeserializeObject<StoreProduct>(responseJson);
            return storeProduct.Quantity;
        }
        
        Console.WriteLine($"Error retrieving sales for check {Content.IdCheck}. Status code: {response.StatusCode}");
        return -1;
    }
    
    private async Task GetProductNameAsync(StoreProduct storeProduct)
    {
        try
        {
            Guid id = storeProduct.ProductId;
            var response = await Client.GetAsync($"https://localhost:5001/api/products/{id}");
            if (response.IsSuccessStatusCode)
            {
                var responseJson = await response.Content.ReadAsStringAsync();
                var product = JsonConvert.DeserializeObject<Product>(responseJson);
                if (product != null)
                {
                    _productNames.Add(storeProduct.Upc, new Tuple<string, bool>(product.Name, storeProduct.IsPromotional));
                }
                else
                {
                    Console.WriteLine($"Product with ID {id} not found.");
                }
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode} - Couldn't retrieve product name for id: {id}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting product name: {ex.Message}");
        }
    }
}






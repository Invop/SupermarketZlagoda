@using SupermarketZlagoda.Data.Model
@using System.ComponentModel.DataAnnotations;
@implements IDialogContentComponent<Employee>

@* Header *@
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@* Body *@
<FluentDialogBody>
    <EditForm EditContext="_editContext">
        <DataAnnotationsValidator />
        <FluentTextField @bind-Value="@Content.Surname">Surname:</FluentTextField>
        <FluentValidationMessage For="() => Content.Surname"></FluentValidationMessage>
        <br/><br/>
        <FluentTextField @bind-Value="@Content.Name">Name:</FluentTextField>
        <FluentValidationMessage For="() => Content.Name"></FluentValidationMessage>
        <br/><br/>
        <FluentTextField @bind-Value="@Content.Patronymic">Patronymic:</FluentTextField>
        <FluentValidationMessage For="() => Content.Patronymic"></FluentValidationMessage>
        <br/><br/>
        <FluentSelect Items="@StringOptions"
                      OptionText="@(i => i.Text)"
                      OptionValue="@(i => i.Value)"
                      OptionSelected="@(i => i.Selected)"
                      @bind-Value="@Content.Role" 
                      Label="Role:"/>
        <FluentValidationMessage For="() => Content.Role"></FluentValidationMessage>
        <br/><br/>
        <FluentNumberField Min="0" @bind-Value="@Content.Salary">Salary:</FluentNumberField>
        <FluentValidationMessage For="() => Content.Salary"></FluentValidationMessage>
        <br/><br/>
        <FluentDatePicker Value="@Content.DateOfStart.ToDateTime(TimeOnly.MinValue)"
                          ValueChanged="@(e => Content.DateOfStart = DateOnly.FromDateTime((DateTime)e))"
                          Label="Date of start"/>
        <FluentValidationMessage For="() => Content.DateOfStart"></FluentValidationMessage>
        <br/><br/>
        <FluentDatePicker Value="@Content.DateOfBirth.ToDateTime(TimeOnly.MinValue)"
                          ValueChanged="@(e => Content.DateOfBirth = DateOnly.FromDateTime((DateTime)e))"
                          Label="Date of birth"/>
        <FluentValidationMessage For="() => Content.DateOfBirth"></FluentValidationMessage>
        <br/><br/>
        <FluentTextField @bind-Value="@Content.PhoneNumber">Phone number:</FluentTextField>
        <FluentValidationMessage For="() => Content.PhoneNumber"></FluentValidationMessage>
        <br/><br/>
        <FluentTextField @bind-Value="@Content.City">City:</FluentTextField>
        <FluentValidationMessage For="() => Content.City"></FluentValidationMessage>
        <br/><br/>
        <FluentTextField @bind-Value="@Content.Street">Street:</FluentTextField>
        <FluentValidationMessage For="() => Content.Street"></FluentValidationMessage>
        <br/><br/>
        <FluentTextField @bind-Value="@Content.ZipCode">Zip code:</FluentTextField>
        <FluentValidationMessage For="() => Content.ZipCode"></FluentValidationMessage>
        <br/><br/>
        <FluentTextField @bind-Value="@Content.UserLogin">User login:</FluentTextField>
        <FluentValidationMessage For="() => Content.UserLogin"></FluentValidationMessage>
        <br/><br/>
        <FluentTextField @bind-Value="@UserPassword"
                          TextFieldType="TextFieldType.Password">User password:</FluentTextField>
        <FluentValidationMessage For="() => UserPassword"></FluentValidationMessage>
        
        @* <FluentTextField @bind-Value=value1 TextFieldType="TextFieldType.Password">Password</FluentTextField> *@
        <style>.fluent-dialog-body * { width: 100%; }</style>
    </EditForm>
</FluentDialogBody>
<FluentDialogFooter>
        <FluentButton Type="ButtonType.Submit"
                      Disabled="@(!_editContext.Validate())"
                      Appearance="Appearance.Accent" OnClick="@SaveAsync">Save</FluentButton>
        <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
    </FluentDialogFooter>
@code {
    [Parameter]
    public Employee Content { get; set; } = default!;
    
    [Required]
    [MinLength(8, ErrorMessage = "Password is too short!")]
    public required string UserPassword { get; set; }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    private EditContext _editContext = default!;
    static readonly List<Option<string>> StringOptions =
    [
        new Option<string> { Value = "Manager", Text = "Manager" },
        new Option<string> { Value = "Cashier", Text = "Cashier", Selected = true }
    ];
    
    protected override void OnInitialized()
    {
        _editContext = new EditContext(Content);
    }
    
    private async Task SaveAsync()
    {
        if (!_editContext.Validate()) return;
        Content.UserPassword = UserPassword;
        await Dialog.CloseAsync(Content);
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

}
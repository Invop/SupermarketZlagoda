@using SupermarketZlagoda.Data.Model
@using SupermarketZlagoda.Data
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Microsoft.IdentityModel.Tokens
@implements IDialogContentComponent<Product>

@* Header *@
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
    <FluentTextField @bind-Value="@Content.Name">Name:</FluentTextField>
    <br/><br/>
    <FluentSelect Items="@_stringOptions"
                  OptionText="@(i => i.Text)" 
                  OptionSelected="@(i => i.Selected)" 
                  OptionValue="@(i => i.Value)"
                  @bind-Value="@_id"
                  Label="Category:"/>
    <br/><br/>
    <FluentTextArea  style="width: 100%;" @bind-Value="@Content.Characteristics">Characteristics:</FluentTextArea >
</FluentDialogBody>

@code {
    
    string _id;
    
    [Parameter]
    public Product Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    
    private Stack<Option<string>> _stringOptions = [];
    private static readonly HttpClient Client = new();
    protected override async Task OnInitializedAsync()
    {
        await UpdateCategoryOptions();
    }

    private async Task UpdateCategoryOptions()
    {
        var response = await Client.GetAsync("https://localhost:5001/api/categories");
        if (response.IsSuccessStatusCode)
        {
            var responseJson = await response.Content.ReadAsStringAsync();
            var categories = JsonConvert
                .DeserializeObject<List<Category>>(JObject.Parse(responseJson)["items"].ToString());
            if (categories.IsNullOrEmpty()) return;
            var id = Content.CategoryId;
            var hasCategory = !id.Equals(Guid.Empty);
            foreach (var category in categories)
            {
                _stringOptions.Push(new Option<string>
                {
                    Value = category.Id.ToString(), Text = category.Name
                });
                if (hasCategory && category.Id.Equals(id))
                    _stringOptions.Peek().Selected = true;
            }
            if (!hasCategory) _stringOptions.Peek().Selected = true;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Error: {response.StatusCode}");
        }
    }
    
    private async Task SaveAsync()
    {
        Content.CategoryId = Guid.Parse(_id);
        await Dialog.CloseAsync(Content);
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
    
}
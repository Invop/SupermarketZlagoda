@using SupermarketZlagoda.Data.Model
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@implements IDialogContentComponent<StoreProduct>
    @* Header *@
    <FluentDialogHeader ShowDismiss="true">
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
            <FluentLabel Typo="Typography.PaneHeader">
                @Dialog.Instance.Parameters.Title
            </FluentLabel>
        </FluentStack>
    </FluentDialogHeader>

    @* Footer *@

    @* Body *@
    <FluentDialogBody>

        <EditForm EditContext="_editContext">
            <DataAnnotationsValidator />
                <FluentCombobox Items="@_products"
                                Label="ProductId:"
                                OptionValue="@(product => product.Id.ToString())"
                                OptionText="@(product => product.Name)"
                                @bind-SelectedOption="@Product"
                                Required="true">
                    <OptionTemplate Context="optionContext">
                        @optionContext.Name
                    </OptionTemplate>
                </FluentCombobox>
        </EditForm>
     
    </FluentDialogBody>
    
    <FluentDialogFooter>
        <FluentButton Type="ButtonType.Submit"
                      Disabled="@(!_editContext.Validate())"
                      Appearance="Appearance.Accent" OnClick="@SaveAsync">Save</FluentButton>
        <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
    </FluentDialogFooter>

    @code {
    private const string ProductsApiUrl = "https://localhost:5001/api/products/unused";
    private const string NotPromoUpcsApiUrl = "https://localhost:5001/api/store-products/not-promo/upcs";   

    [Parameter]
    public StoreProduct Content { get; set; } = default!;
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    private bool IsEditMode { get; set; }
    private Product? Product { get; set; }
    private EditContext _editContext = default!;
    private static readonly HttpClient Client = new();


    private List<Product>? _products = new List<Product>();
    
    protected override async Task OnInitializedAsync()
    {
        
        InitializeEditContextForContent();
        Console.WriteLine(Content.ProductId);
        if (Dialog.Instance.Parameters.Title != null && Dialog.Instance.Parameters.Title.StartsWith("Updating"))
        {
            IsEditMode = true;
            _products = await GetAllUnusedProductsAndCurrent(Content.ProductId);
        }
        else
        {
            IsEditMode = false;
            _products = await GetAllUnusedProducts();
        }

        InitSelectedProduct();
        
    }

    private void InitializeEditContextForContent()
    {
        _editContext = new EditContext(Content);
    }
    
    
    private async Task<List<Product>?> GetAllUnusedProducts()
    {
        var response = await Client.GetAsync(ProductsApiUrl);
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Error: {response.StatusCode}");
            return null;
        }
        var content = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<List<Product>>(JObject.Parse(content)["items"].ToString());
    }
    
    private async Task<List<Product>?> GetAllUnusedProductsAndCurrent(Guid id)
    {
        var response = await Client.GetAsync(ProductsApiUrl+$"/{id}");
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Error: {response.StatusCode}");
            return null;
        }
        var content = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<List<Product>>(JObject.Parse(content)["items"].ToString());
    }

    private void InitSelectedProduct()
    {
        if (IsEditMode)
        {
            if (_products != null) Product = _products.FirstOrDefault(x => x.Id == Content.ProductId);
        }
        else
        {
            Product = _products?[0];
        }
    }
    
    
    private async Task SaveAsync()
    {
        if (_editContext.Validate())
        {
            if (Product != null) Content.ProductId = Product.Id;
            await Dialog.CloseAsync(Content);
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
    
}
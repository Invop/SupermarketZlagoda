@using SupermarketZlagoda.Data.Model
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using ButtonType = Microsoft.FluentUI.AspNetCore.Components.ButtonType
@implements IDialogContentComponent<StoreProduct>
@* Header *@
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())"/>
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@* Footer *@

@* Body *@
<FluentDialogBody>

    <EditForm EditContext="_editContext">
        <DataAnnotationsValidator/>
        <FluentValidationSummary/>
        <FluentTextField Required Label="UPC:" @bind-Value="@Content.Upc"/>
        <FluentValidationMessage For="() => Content.Upc"></FluentValidationMessage>

        @if (!Content.IsPromotional)
        {
            <FluentCombobox Items="@_products"
                            Label="Select ProductId:"
                            OptionValue="@(product => product.Id.ToString())"
                            OptionText="@(product => product.Name)"
                            @bind-SelectedOption="@Product"
                            Required="true">
                <OptionTemplate Context="optionContext">
                    @optionContext.Name
                </OptionTemplate>
            </FluentCombobox>
            <FluentNumberField Label="Quantity:" Min="1" @bind-Value="@(StoreProductQuantity)"/>
            <FluentNumberField Label="Price:" Min="0.001" @bind-Value="@Content.Price"/>
        }
        else
        {
            <FluentNumberField Label="Price:" ReadOnly="true" @bind-Value="@Content.Price"/>
            <FluentNumberField Label="Quantity:" Min="1" Max="@_maxQuantityValue.ToString()" @bind-Value="@(StoreProductQuantity)"/>
        }
    </EditForm>

</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Type="ButtonType.Submit"
                  Disabled="@(!_editContext.Validate())"
                  Appearance="Appearance.Accent" OnClick="@SaveAsync">
        Save
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

@code {
    private const string ProductsApiUrl = "https://localhost:5001/api/products/unused";

    [Parameter] public StoreProduct Content { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;

    private double StoreProductQuantity { get; set; } = 1;
    private Product? Product { get; set; }
    private EditContext _editContext = default!;
    private static readonly HttpClient Client = new();
    private List<Product>? _products = new();
    private int _maxQuantityValue = int.MaxValue;

    protected override async Task OnInitializedAsync()
    {
        InitializeEditContextForContent();
        GetMaxQuantityIfPromotional();
        await HandleDialogDependentLoading();
    }

    private void GetMaxQuantityIfPromotional()
    {
        if (Content.IsPromotional)
            _maxQuantityValue = Content.Quantity;
    }

    private async Task HandleDialogDependentLoading()
    {
        var isUpdatingDialog = Dialog.Instance.Parameters.Title != null && Dialog.Instance.Parameters.Title.StartsWith("Updating");

        if (isUpdatingDialog)
        {
            await HandleUpdateDialog();
        }
        else if(!Content.IsPromotional)
        {
            _products = await GetAllUnusedProducts();
            if (_products != null) Product = _products[0];
        }
    }

    private async Task HandleUpdateDialog()
    {
        StoreProductQuantity = Content.Quantity;

        if (Content is { Upc: not null, IsPromotional: true })
            _maxQuantityValue = await GetQuantityByUpcProm(Content.Upc);

        _products = await GetAllUnusedProductsAndCurrent(Content.ProductId);

        if (_products != null && Content.ProductId != Guid.Empty)
            Product = _products.FirstOrDefault(x => x.Id == Content.ProductId);
    }

    private void InitializeEditContextForContent()
    {
        _editContext = new EditContext(Content);
    }

    private async Task<List<Product>?> GetAllUnusedProducts()
    {
        var response = await Client.GetAsync(ProductsApiUrl);
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Error: {response.StatusCode}");
            return null;
        }

        var content = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<List<Product>>(JObject.Parse(content)["items"].ToString());
    }

    private async Task<List<Product>?> GetAllUnusedProductsAndCurrent(Guid id)
    {
        var response = await Client.GetAsync(ProductsApiUrl + $"/{id}");
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Error: {response.StatusCode}");
            return null;
        }

        var content = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<List<Product>>(JObject.Parse(content)["items"].ToString());
    }

    private async Task<int> GetQuantityByUpcProm(string upc)
    {
        var response = await Client.GetAsync($"https://localhost:5001/api/store-products/{upc}/quantity");
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Error: {response.StatusCode}");
            return 1;
        }

        var content = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<int>(content);
    }

    private async Task SaveAsync()
    {
        if (_editContext.Validate())
        {
            if (Product != null) Content.ProductId = Product.Id;
            if (Content.IsPromotional)
            {
                Content.UpcProm = null;
            }

            Content.Quantity = Convert.ToInt32(StoreProductQuantity);
            await Dialog.CloseAsync(Content);
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

}
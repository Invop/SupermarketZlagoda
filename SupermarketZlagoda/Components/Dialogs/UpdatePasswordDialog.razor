@using SupermarketZlagoda.Data.Model
@implements IDialogContentComponent<PasswordModel>


<EditForm Model="Content">
    <DataAnnotationsValidator/>
    <div>
        <FluentTextField TextFieldType="TextFieldType.Password" @bind-Value="Content.NewPassword"
                         Label="Enter a new password:"/>
        <ValidationMessage For="@(() => Content.NewPassword)"/>
    </div>
</EditForm>
@if (IsDialog)
{
    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Accent"
                      Disabled="@(!_editContext.Validate())"
                      OnClick="@SaveAsync">
            Save
        </FluentButton>
        <FluentButton Appearance="Appearance.Neutral"
                      OnClick="@CancelAsync">
            Cancel
        </FluentButton>
    </FluentDialogFooter>
}

@code {
    private EditContext _editContext = default!;
    [Parameter] public EventCallback<string> OnPasswordUpdate { get; set; }
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    [Parameter] public PasswordModel Content { get; set; } = default!;
    [Parameter] public bool IsDialog { get; set; } = true;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Content);
        Content.NewPasswordChanged += HandleValidSubmit;
        base.OnInitialized();
    }

    private async void HandleValidSubmit(object? sender, EventArgs eventArgs)
    {
        Console.WriteLine("invoked");
        if (!IsDialog)
        {
            await OnPasswordUpdate.InvokeAsync(Content.NewPassword);
        }
    }


    private async Task SaveAsync()
    {
        if (_editContext.Validate())
        {
            await Dialog.CloseAsync(Content);
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

}
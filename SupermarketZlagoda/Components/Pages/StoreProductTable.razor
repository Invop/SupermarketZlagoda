@page "/store-products"
@using SupermarketZlagoda.Data
@inject UserState UserState
@inject IDialogService DialogService
<FluentToolbar id="toolbar-fluent-components">
    @if(IsManager)
    {
        <FluentButton Appearance="Appearance.Accent" OnClick="@(OpenCreateDialogAsync)">Add new store product</FluentButton>
    }
    <FluentRadioGroup @bind-Value="SortType">
        <FluentRadio Value="@(0)">Sort by quantity<FluentIcon Value="new Icons.Regular.Size16.ArrowDown()"/></FluentRadio>
        <FluentRadio Value="@(1)">Sort by quantity<FluentIcon Value="new Icons.Regular.Size16.ArrowUp()"/></FluentRadio>
    </FluentRadioGroup>
    <FluentCheckbox Label="Hide promotions" @bind-Value="HidePromotional"></FluentCheckbox>
    <FluentCheckbox Label="Hide non-promotions" @bind-Value="HideNonPromotional"></FluentCheckbox>
    <MultiselectDropdown Options="_categoryOptions" OnSelectChanged="@HandleSelectCategoryChange"/>
    <FluentTextField @bind-Value="SearchTerm" Placeholder="Search by UPC" Style="margin-top: 10px;"></FluentTextField>
</FluentToolbar>
<FluentDataGrid Items="@_items" ItemSize="54" Virtualize="true" Pagination="@_pagination" GridTemplateColumns="1fr 1fr 0.5fr 0.6fr 0.6fr 1fr 1fr" Style="height: 600px; overflow:auto;">
    <PropertyColumn Property="@(c => c.Upc)"/>
    <PropertyColumn Property="@(c => c.UpcProm)"/>
    <PropertyColumn Property="@(c => c.ProductId)"/>
    <PropertyColumn Property="@(c => c.Price)"/>
    <PropertyColumn Property="@(c => c.Quantity)"/>
    <TemplateColumn Title="PromotionalProduct">
        @if (context.IsPromotional)
        {
            <FluentIcon Value="new Icons.Regular.Size32.CheckmarkCircle()"/>
        }
    </TemplateColumn>
    @if (IsManager)
    {
        <TemplateColumn Title="Actions" Align="@Align.End">
                @if (!context.IsPromotional)
                {   
                    if(string.IsNullOrEmpty(context.UpcProm))
                    {
                        <FluentButton OnClick="@(() => OpenAddPromoStoreProductDialog(context))">Add Promo</FluentButton>
                    }
                    <FluentButton OnClick="@(() =>OpenCreateNewProductBatchDialog(context))">New batch of product</FluentButton>
                }
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => OpenEditDialogAsync(context))"/>
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => OpenDeleteDialog(context))"/>
        </TemplateColumn>
    }
</FluentDataGrid>
<FluentPaginator State="@_pagination">
    <SummaryTemplate>
        There are <strong>@(_pagination.TotalItemCount ?? 0)</strong> rows
    </SummaryTemplate>
    <PaginationTextTemplate>
        This is page <strong>@(_pagination.CurrentPageIndex + 1)</strong> out of a total of <strong>@(_pagination.LastPageIndex + 1)</strong> pages
    </PaginationTextTemplate>
</FluentPaginator>
